service cloud.firestore {
    match /databases/{database}/documents {
        function getAuthUser() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid));
        }

        function isAuthorised(authUser, role) {
            return (
                !resource.data.keys().hasAny(["organisationId"]) ||
                authUser.data.organisationId == resource.data.organisationId
             ) && authUser.data.roles.keys().hasAny([role])
             && authUser.data.roles[role];
        }

        function isUpdateToField(field) {
            return request.resource.data.diff(resource.data).affectedKeys().hasAny([field]);
        }

        match /registrations/{registrationId} {
            allow read, create: if request.auth != null;
            allow update: if request.resource.data.userId == request.auth.uid;
            allow delete: if get(/databases/$(database)/documents/registrations/$(registrationId)).data.userId == request.auth.uid;
        }

        match /reports/{reportId} {
            allow read, write;
        }

        match /projects/{documentId} {
            allow read;
            allow create: if isAuthorised(getAuthUser(), 'editor') == true || isAuthorised(getAuthUser(), 'admin') == true;
            allow update, delete: if (isAuthorised(getAuthUser(), 'editor') == true && resource.data.createdBy == request.auth.uid) || isAuthorised(getAuthUser(), 'admin') == true;
        }

        match /clients/{document} {
            allow read;
            allow create, update, delete: if isAuthorised(getAuthUser(), 'admin') == true;
        }

        match /teams/{document} {
            allow read;
            allow create, update, delete: if isAuthorised(getAuthUser(), 'admin') == true;
        }

        match /tasks/{document} {
            allow read;
            allow create, update, delete: if isAuthorised(getAuthUser(), 'admin') == true;
        }

        match /users/{userId} {
            allow read: if isAuthorised(getAuthUser(), 'admin') == true || (request.auth != null && (userId == request.auth.uid || resource.data.uid == request.auth.uid));
            allow update: if isAuthorised(getAuthUser(), 'admin') == true || (
                (userId == request.auth.uid || resource.data.uid == request.auth.uid) &&
                !isUpdateToField('roles')
            );
            allow create: if request.auth != null && request.resource.data.uid == request.auth.uid && request.resource.data.roles.keys().hasOnly(["user"]);
            allow delete: if isAuthorised(getAuthUser(), 'admin') == true;
        }

        match /favorite-groups/{groupId} {
            allow read;
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null;
        }

        match /favorites/{favoriteId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null;
        }

        match /configs/{configId} {
            allow read;
        }
    }
}
